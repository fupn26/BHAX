<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Liskov helyettesítés sértése</title>
        <para>
            Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a
            megoldásra: jobb OO tervezés.
        </para>
        <para>
            <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf(93-99 fólia)</link>
            (számos példa szerepel az elv megsértésére az UDPROG repóban, lásd pl. source/binom/BatfaiBarki/madarak/)
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/Liskov">https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/Liskov</link>            
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A Liskov elv azt mondja ki, hogy minden osztálynak helyettesíthetőnek
           kell lennie a leszármazottaival anélkül, hogy a program helyes működése
           megváltozna. Ha objektum orientált nyelven programozunk, éredemes ezt
            az elvet betartani, hiszen a proggram továbbfejlesztése során komoly problémát jelenthet
            ennek hiánya. 
        </para>
        <para>
            Lássunk egy példát arra, hogy mi történik, ha nem vesszük a Liskov elvet figyelembe. A példa
            egy matematikai tévedést tartalmaz, amit valószínűleg nem követnénk el a való életben, de jól szemlélteti
            az elvben megfogalmazott szabály hiányát.
            <programlisting language="c++"><![CDATA[
#include <iostream>

using namespace std;

class Negyszog{
public:
    Negyszog(int a_oldal, int b_oldal, int c_oldal, int d_oldal){
        a = a_oldal;
        b = b_oldal;
        c = c_oldal;
        d = d_oldal;
    }
    int a;
    int b;
    int c;
    int d;
    int kerulet;
    int terulet;
};

class Negyzet:public Negyszog{
public:
    Negyzet(int a_oldal, int b_oldal, int c_oldal, int d_oldal):Negyszog(a_oldal, b_oldal, c_oldal, d_oldal){
    }
};

class Teglalap:public Negyzet{
public:
    Teglalap(int a_oldal, int b_oldal, int c_oldal, int d_oldal):Negyzet(a_oldal, b_oldal, c_oldal, d_oldal){
    }
};

void setKeruletTerulet(Negyzet &negyzet){
    negyzet.kerulet = negyzet.a * 4;
    negyzet.terulet = negyzet.a * negyzet.a;
}

int main()
{
    Negyzet& negyzet = *new Negyzet(5,5,5,5);;
    Teglalap& teglalap = *new Teglalap(4,5,4,5);

    setKeruletTerulet(negyzet);
    setKeruletTerulet(teglalap);

    cout << "Téglalap kerülete: " << teglalap.kerulet  << ", Négyzet kerülete: " << negyzet.kerulet << endl;
}

            ]]></programlisting>
            Tehát elsőnek van egy <function>Negyszog</function> osztáylunk. Ebből származtatjuk a
            <function>Negyzet</function> osztályt. Ezután viszont geimetrialiag hibát követünk el, mert
            minden négyzet téglalap, de nem minden téglalap négyzet. A <function>Negyzet</function> osztályból
            származtatjuk a <function>Teglalap</function> osztályt. Majd definiálunk egy függvényt, mely egy
            négyzet kerületét és területét számolja ki. Viszont az objektum orientált nyekvekben az ős helyén
            használható a gyermek is. Vagyis a <function>setKeruletTerulet</function> függvényt meg tudjuk hívni
            egy <function>Teglalap</function> objektummal is. Ami nyilvánvalóan hibás eredményhez vezet, ha 
            olyan táglalapot adunk át, ami nem négyzet.
        </para>
        <para>
            Most, hogy már láttad a C++ forrást, nézzük a Java-s verziót. Nagy különbésg nincs a kettő között, csak
            szintaktikailag.
            <programlisting language="java"><![CDATA[
class LiskovSert{
	public static class Négyszög{
		public int a;
		public int b;
		public int c;
		public int d;

		public Négyszög(int a_oldal, int b_oldal, int c_oldal, int d_oldal){
			a = a_oldal;
			b = b_oldal;
			c = c_oldal;
			d = d_oldal;
		}

		public int kerület;
		public int terület;
	}
	
	public static class Négyzet extends Négyszög{
		public Négyzet(int a_oldal, int b_oldal, int c_oldal, int d_oldal){
			super(a_oldal, b_oldal, c_oldal, d_oldal);
		}
	}
	
	public static class Téglalap extends Négyzet{
		public Téglalap(int a_oldal, int b_oldal, int c_oldal, int d_oldal){
			super(a_oldal, b_oldal, c_oldal, d_oldal);
		}
	}

	public static class Program{
		public void setKerületTerület(Négyzet negyzet){
			negyzet.kerület = negyzet.a * 4;	
			negyzet.terület = negyzet.a * negyzet.a;
		}
	}	

	public static void main(String[] args){
		Program program = new Program();
		Négyzet negyzet = new Négyzet(5,5,5,5);;
		Téglalap teglalap = new Téglalap(4,5,4,5);
		
		program.setKerületTerület(negyzet);
		program.setKerületTerület(teglalap); 

		System.out.println("Téglalap kerülete: " + teglalap.kerület + ", Négyzet kerülete: "+ negyzet.kerület); 
		
	}
} 
            ]]></programlisting>
            Annyiban eltér a C++-os forrástól, hogy ebben a <function>setKerületTerület</function> függvény a <function>Program</function>
            osztálynak egy tagfüggvénye. 
        </para>
    </section>        

    <section>
        <title>Szülő-gyerek</title>
        <para>
            Írjunk Szülő-gyerek Java és C++ osztálydefiníciót, amelyben demonstrálni tudjuk, hogy az ősön
            keresztül csak az ős üzenetei küldhetőek!
        </para>
        <para>
            <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf(98. fólia)</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/Sz%C3%BCl%C5%91-gyerek">https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/Sz%C3%BCl%C5%91-gyerek</link>             
        </para>
        <para>
           <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A feladat lényege, hogy bemutassuk, az ős refernciáin vagy pointerein keresztül csak az ős
            függvényeit tudjuk meghívni.
            Lássuk elsőnek a C++-os példát.
            <programlisting><![CDATA[
#include <iostream>

using namespace std;

class Vehicles{
public:
//    void setNumberOfWheels(){
//        wheels = 0;
//    }
    int wheels = 0;
};

class Cars: public Vehicles{
public:
    void setNumberOfWheels(){
        wheels = 4;
    }
};

int main()
{
    Vehicles &vehicle = *new Cars();

    vehicle.setNumberOfWheels(); //Hibás, mivel az ős nem tudja elérni a gyermek metódusait.

    cout << "The number of wheels: " << vehicle.wheels << endl;
}
            ]]></programlisting>
            Tehát van egy <function>Vehicles</function> osztályunk, aminek a 
            <function>wheels</function> változójában a kerekek számát tároljuk.
            A kerekek száma alapértelmezetten nulla. A <function>Cars</function>
            ennek az osztálynak a leszármazottja. Tartalmaz egy függvényt, amely
            beállítja a kerekek számát 4-re. A <function>main</function> függvényben 
            deklarálunk egy <function>Vehicle</function> osztály refeneciát, és 
            értékéül egy <function>Cars</function> osztályrefernciát adunk. Ha a 
            <function>vehicle</function> referncián keresztül meghívjuk a <function>setNumberOfWheels</function>
            függvényt, akkor hibát dob a program, nem találja a függvény definícióját.
        </para>
        <para>
            Ugyanez a forrás Java nyelven a következőképpen néz ki:
            <programlisting language="java"><![CDATA[
public class Vehicles{
//	public void setNumberOfWheels(){
//		wheels = 0;
//	}
	public int wheels;

	public static class Cars extends Vehicles{
	    	public void setNumberOfWheels(){
		        wheels = 4;
	    	}
	}

	public static void main(String[] args)
	{
    		Vehicles vehicle = new Cars();

		vehicle.setNumberOfWheels(); //Hibás, mert az ős a leszármazott metódusait nem éri el.

		System.out.println("The number of wheels: "+vehicle.wheels);
	}
}

            ]]></programlisting>
        </para>
    </section>
    
    <section>
        <title>Anti OO</title>
        <para>
            A BBP algoritmussal <link xlink:href="www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#pi_jegyei">www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#pi_jegyei</link>
            a Pi hexadecimális kifejtésének a 0. pozíciótól számított 10<superscript>6</superscript>,
            10<superscript>7</superscript>, 10<superscript>8</superscript> darab
            jegyét határozzuk meg C, C++, Java és C# nyelveken és vessük össze a futási időket! 
        </para>
        <para>
            <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/Anti%20OO">https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/Anti%20OO</link>              
        </para>
        <para>
           <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <caution>
            <title>Segítség .NET telepítéséhez minden platformra</title>
            <para>
                <link xlink:href="https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro">https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro</link>
            </para>
        </caution>
        <table frame='all'><title>Eredmények</title>
            <tgroup cols='4' align='center' colsep='1' rowsep='1'>
                    <colspec colname='c1'/>
                    <colspec colname='c2'/>
                    <colspec colname='c3'/>
                    <colspec colname='c4'/>
                    <thead>
                    <row>
                      <entry></entry>
                      <entry>C++</entry>
                      <entry>Java</entry>
                      <entry>C#</entry>
                    </row>
                    </thead>
                    <tfoot>
                    <row>
                      <entry>10<superscript>8</superscript></entry>
                      <entry>229.681</entry>
                      <entry>205.073</entry>
                      <entry>241.051</entry>
                    </row>
                    </tfoot>
                    <tbody>
                    <row>
                      <entry>10<superscript>6</superscript></entry>
                      <entry>1.726</entry>
                      <entry>1.547</entry>
                      <entry>2.002</entry>
                    </row>
                    <row>
                      <entry>10<superscript>7</superscript></entry>
                      <entry>20.015</entry>
                      <entry>17.912</entry>
                      <entry>21.239</entry>
                    </row>
                    </tbody>
                </tgroup>
        </table>
        <para>
            Az eredményeket figyelembe véve egyértelműen látszik, hogy a C#-os
            verzió teljesít a leggyengébben. Hozzá képest alig gyorsabb a C++-os,
            ezzel szemben a Java-s program több másodperccel gyorsabb mind a kettőnél.
        </para>
    </section>
    
    <section>
        <title>
            <emphasis role="cadiumgreen">deprecated - Hello, Android!</emphasis>
        </title>
        <para>
            Élesszük fel a <link xlink:href="https://github.com/nbatfai/SamuEntropy/tree/master/cs">https://github.com/nbatfai/SamuEntropy/tree/master/cs</link> projektjeit és vessünk össze
            néhány egymásra következőt, hogy hogyan változtak a források!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
    </section>
    
    <section>
        <title>Hello, Android!</title>
        <para>
            Élesszük fel az SMNIST for Humans projektet!
            <link xlink:href="https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main">https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main</link>
            Apró módosításokat eszközölj benne, pl. színvilág.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/SMNISTforHumans">https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/SMNISTforHumans</link>               
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Az SMNIST for Humans projekt lényege, hogy megvizsgáljuk, hogy egy átlag
            egyszerre hány pontot tud hatékonyan megszámolni a képernyőn. A sikeres
            találatokat számolja a program, és elmenti a játékos eredményeit.
        </para>
        <para>
            Ahhoz, hogy ki tudjuk próbálni, telepíteni kell az Android Studio-t.
            Ha ezt megtettük, a legegyszerűbb megoldás, hogy létrehozunk egy új projektet, 
            és a fentebb megadott fájlokat csak hozzáadjuk ehhez. Néhány módosítást
            végeztem az eredetin.
            <programlisting language="java"><![CDATA[
               //régi
               public class SMNISTE3Activity extends android.support.v7.app.AppCompatActivity { 
               }
               //új
               public class MainActivity extends AppCompatActivity {
                }  
            ]]></programlisting>
            A <function>Activity</function> osztálynak a őse megváltozott, és láthatóan
            a neve is, köszönhetően annak, hogy egy másik projektbe lett beillesztve.
            Más változtatásra nem volt szükség, hogy a program működőképes legyen.
        </para>
        <para>
            Miután sikerült működőképessé tenni, el lehet kezdeni módosítani a 
            kódot. Az első módosítás a háttér megváltoztatása volt.
            <programlisting language="java"><![CDATA[
            //régi
            int[] bgColor =
            {
                    android.graphics.Color.rgb(11, 180, 250),
                    android.graphics.Color.rgb(11, 250, 180)
            };
            //új
            int[] bgColor =
            {
                    android.graphics.Color.rgb(50, 50, 50),
                    android.graphics.Color.rgb(0, 0, 0)
            };
            ]]></programlisting>
            Majd az interaktív terület kitöltési, körvonal színét és a 
            szöveg színét módosítottam az alábbiak szerint.
            <programlisting language="java"><![CDATA[
        textPaint.setColor(Color.BLACK);
        textPaint.setStyle(android.graphics.Paint.Style.FILL_AND_STROKE);
        textPaint.setAntiAlias(true);
        textPaint.setTextAlign(android.graphics.Paint.Align.CENTER);
        textPaint.setTextSize(50);
                
        borderPaint.setStrokeWidth(2);
        borderPaint.setColor(Color.DKGRAY);
        fillPaint.setStyle(android.graphics.Paint.Style.FILL);
        fillPaint.setColor(android.graphics.Color.rgb(255, 127, 80)); 
            ]]></programlisting>
        </para>
        <para>
            A másik módosítás abban történt, hogy a program interaktív területe
            középre lett illesztve.
            <programlisting language="java"><![CDATA[
    public void drawMeasurement(android.graphics.Canvas canvas) {

        float x = -startx + 800/2;
        float y = -starty - 800/10;

        float c_x = x+800/3;

        canvas.drawCircle(c_x,y,
                120, fillPaint);
        canvas.drawCircle(c_x, y,
                118, borderPaint);

        for (int i = 0; i < 10; ++i) {

            canvas.drawCircle(c_x + digitsCoords[2 * i], y + digitsCoords[2 * i + 1],
                    40, borderPaint);

            canvas.drawCircle(c_x + digitsCoords[2 * i], y + digitsCoords[2 * i + 1],
                    38, fillPaint);

            String s = "" + i;
            textPaint.getTextBounds(s, 0, s.length(), textBounds);
            canvas.drawText(s, c_x + digitsCoords[2 * i],
                    y + digitsCoords[2 * i + 1] - textBounds.exactCenterY(), textPaint);

        }

        for (int i = 0; i < semValue; ++i) {
            canvas.drawCircle(c_x + semValueDots[2 * i], y + semValueDots[2 * i + 1],
                    10, dotPaint);
        }

        textPaint.getTextBounds(msg1, 0, msg1.length(), textBounds);

        canvas.drawText(msg1, x-160, y + 380 - 40 - textBounds.height(), msgPaint);
        canvas.drawText(msg2, x-160, y + 380 , msgPaint);
    }
            ]]></programlisting>
            Az új <function>drawMeasurement</function> függvény a fenti utasításokat
            tartalmazza. Lényegében az x és y koordináták manipulálásával lehet 
            elérni a középre illesztést.
            <figure>
                <title>Az új kinézet</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/SMNISTforHumans/images/new_look.png" format="PNG" scale="50"/>
                        </imageobject>
                    </mediaobject>
            </figure>
        </para>
    </section>
    
    <section>
        <title>
            <emphasis role="red">Hello, SMNIST for Humans!</emphasis>
        </title>
        <para>
            Fejleszd tovább az SMNIST for Humans projektet SMNIST for Anyone emberre szánt appá! Lásd
            az smnist2_kutatasi_jegyzokonyv.pdf-ben a részletesebb hátteret!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
    </section>
                  
    <section>
        <title>Ciklomatikus komplexitás</title>
        <para>
            Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom
            tekintetében a <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf</link> 
            (77-79 fóliát)!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/Ciklomatikus_komplexit%C3%A1s">https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/Ciklomatikus_komplexit%C3%A1s</link>              
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A ciklomatikus komplexitás, másnéven McCabe-komplexitás a program döntési komplexitását adja meg a gráfelmélet szabályait használva.
            A képlet a következő: <function>M = E - N + 2P</function>, ahol E a gráf éleinek a száma, N a csúcsok száma és P az
            összefüggő komponensek száma. Tehát minnél több elágazás van a program vezérlésében, annál nagyobb értéket kapunk.
        </para>
        <para>
            Az a program, aminek ki fogjuk számolni a ciklomatikus komplexitását, a BBP program lesz. Ehhez egy Maven projetet hozunk létre,
            és abba beleágyazzuk a programunkat. Ez abból áll, hogy a Netbeans-ben létrehozunm egy új Maven projecetet, és ahhoz hozzáadjuk a 
            PiBBP.java osztályt. Majd az <function>mvn</function> paranccsal lehet felépíteni a <function>.class</function> fájlt. 
            Fontos, hogy az <function>mvn</function> parancsot ott futassuk, ahol a <filename>pom.xml</filename> található.
        </para>
        <caution>
            <title>Maven használata</title>
            <para>
                Telepíteni a <function>sudo apt install maven</function> paranccsal lehet.
            </para>
        </caution>
        <para>
        Emellett még szükségünk lesz a SonarQuebe Community Edition programra, amely egy elemezni fogja a forrásunkat.
        Ha letöltöttük, akkor futtani kell a <filename>sonar.sh start</filename> parancsot a terminálba, ez a 
        egy szervert indít el, mely a <link xlink:href="http://localhost:9000 ">http://localhost:9000 </link>
        URI-n keresztül érhető el. Jelentkezzünk be admin/admin-nal, majd hozzunk létre egy új projektet. 
        <figure>
                <title>Project létrehozása</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Ciklomatikus_komplexitás/new_project.png" format="PNG" scale="100"/>
                        </imageobject>
                    </mediaobject>
        </figure>
        <figure>
                <title>Név megadása</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Ciklomatikus_komplexitás/new_project2.png" format="PNG" scale="100"/>
                        </imageobject>
                    </mediaobject>
        </figure>
        <figure>
                <title>Token generálása</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Ciklomatikus_komplexitás/new_project3.png" format="PNG" scale="100"/>
                        </imageobject>
                    </mediaobject>
        </figure>
        <figure>
                <title>Forrás teszthez szükséges parancs</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Ciklomatikus_komplexitás/new_project4.png" format="PNG" scale="100"/>
                        </imageobject>
                    </mediaobject>
        </figure>
        Az, hogy miből generáljuk a token-t, teljesen szabadon választhataó. A végén megkapjuk a parancsot, amivel
        a SonarQube leellenőrzi a kódot, és az eredméynek megnézhetők a weboldalon. Láthatjuk, hogy az eredmény 12.
        <figure>
                <title>Forrás teszthez szükséges parancs</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Ciklomatikus_komplexitás/result.png" format="PNG" scale="100"/>
                        </imageobject>
                    </mediaobject>
        </figure>
        
        </para>
    </section> 

</chapter>                
