<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gödel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Gengszterek</title>
        <para>
            Gengszterek rendezése lambdával a Robotautó Világbajnokságban
        </para>
        <para>
            <link xlink:href="https://youtu.be/DL6iQwPx1Yw">https://youtu.be/DL6iQwPx1Yw(8:05-től)</link>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Ebben a feldatban azt fogjuk megismerni, hogy hogyan lehet a C++11-től bevezetett
            <function>std::sort()</function> függvényt használni. Ez a gyorsrendezés algoritmusát
            implementálja.
            Lássuk a tárgyalni kívánt
            kódrészletet.
            <programlisting language="c++"><![CDATA[
            std::sort ( gangsters.begin(), gangsters.end(), [this, cop] ( Gangster x, Gangster y )
            {
                return dst ( cop, x.to ) < dst ( cop, y.to );
            } );]]>                  
            </programlisting>
            Az <function>std::sort()</function> függvényből létezik 2 és 3 paraméteres
            verzió létezik. Az első 2 paraméter mindig az, hogy mettől meddig szeretnénk
            rendezni a vektort, vagy tömböt. A harmadik pedig egy opcionális paraméter, mely
            egy, a rendezés alapjául szolgáló függvényt ad meg. Ha ezt kihagyjuk, akkor a 
            beépített függvény dönti el, hogy mi alapján fogja rendezni a vektort.
        </para>
        <para>
            Tehát az első két paraméternek megadjuk a <varname>gangsters</varname> vektor
            első utolsó elemének indexét a <function>begin()</function> és <function>end()</function>
            függvények segítségével. Az érdekességet a 3. paraméter hordozza. Ez egy név nélküli 
            függvény, más néven lambda függvény.
        </para>
        <para>
            A lambda függvény C++11 óta támogatott. A szintaxisa a következő:
            <programlisting>
                [](paraméterek)-> visszatérési típusa {utasítások}
            </programlisting>
            A [] jelek közé lehet olyan változókat megadni, melyek a függvényen kívülről
            szertnénk elérni. A mi példánkban az aktuális objektum mutatójára és a <varname>cop</varname>
            objektumra van szükségünk.
            A paraméterül két <classname>Gangster</classname> osztályú
            objektumot, melyek mindig a <function>sort</function> által összehasonlított 
            elemek. A lambda testében lévő utasítás szerint pedig azt vizsgáljuk, hogy 
            melyik gangster van közelebb a rendőrhöz, és egy <varname>bool</varname> értékkel
            tréünk vissza. Ahogy a lambda szintaxisánál láttuk, ezt meg lehetne adni explicit
            módon, de mivel csak egy visszatérési értéke van a függvénynek, és típusa egyértelmű,
            ezért nem kell megadni.
        </para>
        <para>
            Összegezve a <function>std::sort()</function> függvény, és egy lambda függvény
            segítségével a <varname>gangsters</varname> vektor elemeit a rendőröktől való
            távolságuk szerint rendezzük növekvő sorrendbe.
        </para>
    </section>        

    <section>
        <title>C++11 Custom Allocator</title>
        <para>
            <link xlink:href="https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/">https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/</link> a
            CustomAlloc-os példa, lásd C forrást az UDPROG repóban
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/CustomAlloc">https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/CustomAlloc</link>               
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Amikor példányosítunk egy objektumot, akkor a memóriában lefoglalódik az ehhez szükséges terület. C++-ban a <function>new</function>
            operátorral tudjuk meghívni az alapértelmezett allokátort. Ez remekül müködik, viszonot bizonyos esetkben nagyobb beleszólást szeretnénk
            a programunk memóriakezelésébe. Ennek érdekében készíthetünk saját allokátor osztályt. Ebben a feladatban arra fogjuk használni a 
            <classname>CustomAlloc</classname> osztályunkat, hogy nyomonkövessük a lefoglalt memóriaterületeket.
        </para>
        <para>
            Názzük is meg a <classname>CustomAlloc</classname> osztályunkat.
            <programlisting language="c++"><![CDATA[
                template<typename T>
                    class CustomAlloc
                    {
                    public:
                        CustomAlloc() {}
                        CustomAlloc(const CustomAlloc&) {}
                        ~CustomAlloc() {}
                    
                        using size_type = size_t;
                        using value_type = T;
                        using pointer = T*;
                        using const_pointer = const T*;
                        using reference = T&;
                        using const_reference = const T&;
                        using difference_tyoe = ptrdiff_t;
                    
                        pointer allocate( size_type n){
                            int s;
                            char* p = abi::__cxa_demangle( typeid (T).name(), 0, 0, &s);
                            std::cout << "Allocating"
                                      << n << " objects of "
                                      << n*sizeof (T)
                                      << " bytes. "
                                      << typeid (T).name() << "=" << p
                                      << std::endl;
                            delete p;
                            return reinterpret_cast<T*>(new char[n*sizeof(T)]);
                        }
                    
                        void deallocate (pointer p, size_type n){
                            delete[] reinterpret_cast<char *>(p);
                            std::cout << "Deallocating"
                                      << n << " objects of "
                                      << n*sizeof (T)
                                      << " bytes. "
                                      << typeid (T).name() << "=" << p
                                      << std::endl;
                    
                        }                    
                    };]]>
            </programlisting>
            Ahogy látható ez egy template-elt osztály, tehát bármilyen típussal használhatjuk. Az osztály konstruktorait most nem kell megírunk, elég az alapértelmezett 
            használata. Egy érdekesség a <function>using</function> kulcsszó, amellyel eddig még nem találkoztunk. Ez a C++11-től kezdve a <function>typedef</function>
            helyett használható. Tehát alias-ként szolgál az egyenlőségjel jobb oldalán található típusokra. Az <function>allocate</function> osztály végzi a szükséges 
            terület lefoglalását, és erre a területre mutató pointerrel tér vissza. Ebben a függvényben az <function>std</function> névtér mellett megismerkedünk egy 
            újjal, mely az <function>abi</function>. Ez az <emphasis role="strong">A</emphasis>pplication <emphasis>B</emphasis>inary <emphasis role="strong">I</emphasis>nterface rövidítése.
            Ennek segítségével meg tudjuk határozni, hogyan legyenek az argumentumok tárolva a hívási stack-ben, a registerekben, hogyan legyenek rendezve és padding-elve az egyes típusok
            a struktúrákban. Mielőtt tovább haladnánk a kód elemzésében, elsőnek ejtsünk pár szót a <emphasis role="strong">name mangling</emphasis>-ról.    
        </para>
        <para>
            A <emphasis role="strong">name mangling</emphasis> a fordító által történik. A lényege, hogy a forrásfájlban szereplő neveket átalakítja belsőleg használtakra.
            Ezt úgy kell elképzelni, hogy például a <function>void pelda(int i, char b)</function> függvényt a fordító átalakítja <function>pelda_FvicE</function> formára.
            Természetesen az egyes fordítók eltérően alakíthatják át az egyes kifejezéseket. A <emphasis role="strong">name mangling</emphasis> lényege, hogy a megkönnyítse a 
            linker feladatát abban, hogy megkülönböztesse az egyes neveket. Ahogy látható a fenti példában, az átalakított formának is tartalmaznia kell a függvény nevét, és 
            a kért paraméterek típusát. A visszatérési érték mindig az F utáni első betű, ami jelenleg <function>void</function>-ot jelöl. Későbbiekben majd láthatjuk, hogy a 
            beépített típusokat mindig a kezdőbetűjével fog reprezentálni ez a mevhanizmus.
        </para>
        <para>
            Most, hogy tudjuk, mi is az a <emphasis role="strong">name mangling</emphasis>, már sejthetjük, hogy mire fogjuk használni a <function>__cxa_demangle</function>
            függvényt. Ennek segítségével tudjuk visszafejteni, hogy az átalakított formából az eredeti típust. A <function>typeid().name()</function> segítségével megkapjuk, hogy
            egy objektum típusa milyen néven lett átalakítva. Ebben az esetben a fenti példában tárgyalt <function>void pelda(int i, char b)</function> esetén a 
            <function>typeid(pelda).name()</function> függvény a <function>FvicE</function> kifejezést adja vissza. Tehát a <classname>CustomAlloc</classname> osztályunkban a 
            <varname>T</varname> típusát fogjuk eltárrolni a karaktertömbként a <varname>p</varname> változóban. Majd <function>cout</function> segítségével kiíratjuk a 
            lefoglalt bájtok méretét, és, hogy milyen típusnak foglaltunk területet. Végezetül pedig visszatérünk egy <varname>T</varname> típusú pointerrel, mely egy 
            újonnan lefoglalt memóriaterületre mutat.
        </para>
        <para>
            A <function>deallocate</function> függvény pedig a memória felszabadítsásáért felel. Itt is kiiírjuk a terminálba, hogy mennyi a felszabadított bájtok száma, és 
            azt, hogy melyik memóriaterületet szabadítottuk fel.
        </para>
        <para>
            A <function>main</function> függvény a következőképpen néz ki:
            <programlisting language="c++"><![CDATA[
                int main()
                {
                    std::vector<int, CustomAlloc<int>> v;

                    v.push_back(1);
                    v.push_back(2);
                    v.push_back(3);
                    v.push_back(4);
                    v.push_back(5);
                    v.push_back(6);
                    v.push_back(7);
                    v.push_back(8);
                    v.push_back(9);
                    v.push_back(10);
                    v.push_back(11);
                    v.push_back(12);
                    v.push_back(13);
                    v.push_back(14);
                    v.push_back(15);

                    for(int x : v){
                        std::cout << x << std::endl;
                    }

                    std::cout << typeid(pelda).name() << std::endl;
                    return 0;
                }]]>
            </programlisting>
            Deklarálunk egy vektor, melynél megadjuk, hogy a mi allokátorunkat használja. Majd elkezdünk belerakni elemeket, és végül kiíratjuk a vektorban tárolt elemeket.
            <figure>
                <title>Custom Allocator</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/CustomAlloc/result.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
            </figure>
            A képen felfigyelhetünk a vektorok érdekes működésére. A lényeg, hogy C++-ban a vektorok dinamikus adatszerkezetek, tehát "bármennyi" eleme lehet, de ezt úgy valósítja
            meg, hogy ha betelik a lefoglalt terület, és új elemet adunk hozzá, akkor egy újat foglal le, melynek mérete az előző duplája lesz. A már benne lévő elemeket átmásolja 
            az új területre, majd törli a régit. Ha valaki azt szeretné, hogy a ne foglaljon újra területet, akkor használhatjuk a vektor <function>reserve</function> tagfüggvényét, 
            mellyel meg lehet határozni, hogy hány bájtot foglaljon le. Ennek segítségével elérhetjük, hogy ritkábban, vagy esetleg soha ne kelljen újabb területet foglalnia a vektornak.
        </para>
    </section>        
        
    <section>
        <title>STL map érték szerinti rendezése</title>
        <para>
            Például: <link xlink:href="https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cpp#L180">https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cpp#L180</link>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Az STL szó a Standard Template Library rövidítése, melynek fontos részét képezik a tárolók. A hagyományos C tömbök továbbfejlesztésének igénye 
            hívta elő új típusú tárolók létrehozásának igéynét. Alapvető célok voltak, hogy olyan adatszerkezeteket használjanak, melyek hatékonyan, 
            biztonságosan, kivételbiztosan és típushelyesen tárolják az adatokat. STL tároló például a vector, a feladatban szereplő map, de a list, 
            a set és a stack is ide sorolható. 
        </para>
        <para>
            A <function>map</function> tárolók asszociatív tömbök, melyek kulcs-adat párokból áll, és kulcsértékek alapján növekvően van rendezve. 
            Lássuk, hogy hogyan használjuk ezt a <filename>fenykard.cpp</filename> forrásban.
            <programlisting language="c++"><![CDATA[
std::vector<std::pair<std::string, int>> sort_map ( std::map <std::string, int> &rank )
        {
                std::vector<std::pair<std::string, int>> ordered;
        
                for ( auto & i : rank ) {
                        if ( i.second ) {
                                std::pair<std::string, int> p {i.first, i.second};
                                ordered.push_back ( p );
                        }
                }
        
                std::sort (
                        std::begin ( ordered ), std::end ( ordered ),
                [ = ] ( auto && p1, auto && p2 ) {
                        return p1.second > p2.second;
                }
                );
        
                return ordered;
        }]]>
            </programlisting>
            Ahogy láthatjuk a <function>sort_map</function> függvény visszatérési értékének típusa egy vektor lesz. Az érdekesség, hogy a párokból áll.
            Ehhez az <classname>std::pair</classname> adatszerkezetet használjuk, mely lehetővé teszi heterogén adatok párban való tárolását. Vagyis 
            jelen esetben sztringeket és egészek párját tudjuk tárolni. Az <classname>std::map</classname>, ahogy már megbeszéltük, egy rendezett 
            asszociatív tömb. Kulcs és érték párokból áll, és minden kulcs csak egyszer fordulhat benne elő. Maga a függvény által végrehajtott 
            utasítások már ismertek. Elsőnek bejátjuk a <varname>rank</varname> map-et, és az érték párokat beletesszük az <varname>ordered</varname>
            vektorba. Említést érdemel az <classname>auto</classname> típus. Ez a C++11 óta létező funkció, melynek lényege, hogy a fordító automatikusan
            találja meg a megfelelő típust az adott változóhoz. Végül a vektor rendezése az előző feladatban megismert lambda kifejezésssel történik. 
            Vagyis értékek alapján rendezzük át a vektort. Hogy jobban belelássatok abba, hogy miért is van erre szükség, térjünk ki arra, hogy mire szolgál a 
            <filename>fenykard</filename> program. Régen ez alapján adtak jegyeket a diákoknak. Ekkor már logikusnak tűnik, hogy elsőnek a <classname>map</classname>-ben
            kell tárolni az egyes hallgatókat, hogy ne szerepelhessen többször ugyanaz a tanuló. Viszont az értékelés szempontjából nem kívánatos, hogy 
            név alapján legyen rendezve a tömb. Ahhoz, hogy a teljesítményt lehessen osztályozni, át kell alakítani az adatszerkezetet érték szerint rendezetté. 
        </para>
    </section>        

    <section>
        <title>Alternatív Tabella rendezése</title>
        <para>
            Mutassuk be a <link xlink:href="https://progpater.blog.hu/2011/03/11/alternativ_tabella">https://progpater.blog.hu/2011/03/11/alternativ_tabella</link> a programban a java.lang
            Interface <![CDATA[Comparable<T>]]> szerepét!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/AlternativTabella">https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/AlternativTabella</link>               
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Az Alternatív Tabella a magyar labarúgó bajnoság csapatainak alternatív rangsorát tartalmazza. Különlegessége abban rejlik, hogy 
            nem csak azt vizsgálja, hogy nyert, döntetlent vagy vereséget ért el egy csapat, hanem azt is, hogy ki ellen éri el az eredményt. Tehát
            célja, hogy hitelesebb képet kapjunk a csapatok valós teljesítményéről.
        </para>
        <para>
            A feladat célja, hogy megismerkedjünk a csapatok közti összehasonlítás mechnizmusát. Az csapatok kezeléséhez létrehozunk egy 
            <classname>Csapat</classname> osztályt, mely implementálja a <classname>Comparable</classname> interfészt. Lássuk az osztályt.
            <programlisting language="java"><![CDATA[
                class Csapat implements Comparable<Csapat> {

                    protected String nev;
                    protected double ertek;
                  
                    public Csapat(String nev, double ertek) {
                      this.nev = nev;
                      this.ertek = ertek;
                    }
                  
                    public int compareTo(Csapat csapat) {
                      if (this.ertek < csapat.ertek) {
                        return -1;
                      } else if (this.ertek > csapat.ertek) {
                        return 1;
                      } else {
                        return 0;
                      }
                    }
                  }]]>
            </programlisting>
            Tehát egy <classname>Csapat</classname> típusú objektum rendelkezik egy névvel és egy értékkel. Mivel implementáltuk a 
            <classname>Comparable</classname> interfészt, ezért definiálnunk kell a <function>compareTo</function> függvényt. Ennek 
            segítségével tudjuk meghatározni, hogyan legyen összehasonlítva a két objektum.
        </para>
        <para>
            Most hogy láttuk, hogyan mi a feladata a <classname>Comparable</classname> interfésznek. Nézzük meg, hogy az AlternatívTabella
            programunk többi forrását.
        </para>
        <para>
            Az eredeti példában a két programunk volt. Az egyik <classname>Wiki2Matrix</classname>. Ez a csapatok egymás elleni eredményeit tartalmazó
            kereszttáblázatból kiszámolja a linkmátrixot, amely alapjául szolgál a <classname>AlternativTabella</classname> programunkhoz. Viszont ekkor 
            a kiírt linkmátrixot be kellett másolni az <classname>AlternativTabella</classname> forrásába, mely nem túl felhasználóbarát. Ezért a 
            linkmátrixot a <classname>Wiki2Matrix</classname> osztály tagváltozójában tároljuk el. Ehhez a <function>nyom3</function> függvény 
            átalakításával érjük el.
            <programlisting language="java"><![CDATA[
                void nyom3(int[][] k, int[] oszlopOsszeg) {
                    for (int i = 0; i < k.length; ++i) {
                        matrix.add(new ArrayList<>());
                        System.out.println();
                        System.out.print("{");
                        for (int j = 0; j < k[i].length; ++j) {
            
                            if (oszlopOsszeg[j] != 0.0) {
                                System.out.print(k[i][j] * (1.0 / oszlopOsszeg[j]) + ", ");
            //                    matrix[i][j] = k[i][j] * (1.0 / oszlopOsszeg[j]);
                                matrix.get(i).add(k[i][j] * (1.0 / oszlopOsszeg[j]));
                                
                            } else {
                                System.out.print(k[i][j] + ", ");
                                matrix.get(i).add(k[i][j] * 1.0);
                            }
            
                        }
                        System.out.print("},");
                    }
                }]]>            
            </programlisting>
            Magát a linkmátrixot egy kétdimenziós <classname>ArrayList</classname>-ben tároljuk, mely a <classname>Vector</classname>
            osztályt helyettesíti, mivel azt már az általam használt Java 11-ben a használata már nem javasolt, mivel ki fog kerülni a JDK-ból.
            A másik módosítás a <function>AlternativTabella</function> osztályban történt.
            <programlisting language="java"><![CDATA[
                public static void main(String[] args) {
        
                    Wiki2Matrix Matrix = new Wiki2Matrix();
                    
                    ArrayList<ArrayList<Double>> L = Matrix.getMatrix();
                        
                        ...

                    }]]>
            </programlisting>
            Tehát példányosítjuk a <classname>Wiki2Matrix</classname> osztályt. Végül pedig az osztály <function>getMatrix()</function> tagfüggvényével
            érjük el.
        </para>
    </section>        

    <section>
        <title>Prolog családfa</title>
        <para>
            Ágyazd be a Prolog családfa programot C++ vagy Java programba! Lásd para_prog_guide.pdf!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/PrologFamily">https://github.com/fupn26/BHAX/tree/master/attention_raising/Source/PrologFamily</link>               
        </para>
        <caution>
            <title>
                Megjegyzés
            </title>
            <para>
                Tutorált: Racs Tamás
            </para>
        </caution>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A Prolog egy olyan programozási nyelv, melynek segítségével matematikai logikai formulákat tudunk vizsgálni. A matematikai logikáról ez a 
            feladat nem fog részletesebb tájékoztatást nyújtani, a fentebb lévő pdf-ben találhattok példákat a mélyebb megértéshez. Annyit fontos
            megemlíteni, hogy a program az elsőrendű logikán alapszik. Tehát itt az atomi formulák mellett megjelennek a függvényszimbólumok és a 
            kvantorok, mint a logikai formulák építőelemei.
        </para>
        <caution>
            <title>SWI-Prolog használata</title>
            <para>
                <programlisting>
                    sudo apt install swi-prolog-java               
                </programlisting>
                Ha telepítettük, akkor a NetBeans-ben a projektet megnyitva a <function>Libraries</function>-ra jobb egér kattintással tudjuk
                hozzáadni a könyvtárat. Elsőnek létre kell hozni egy új osztályt, majd a <function>/usr/lib/swi-prolog/lib/jpl.jar</function> fájlt kell megadni a ClassPath mezőben.
            </para>
        </caution>
        <para>
            A programunk Java programban íródott, mely az SWI-Prolog könyvtárat használja. Alapvetően a 
            program úgy működik, hogy a elsőnek betöltjük a Prolog fájlt, majd arról készítünk lekérdezéseket.
        </para>
        <para>
            A <filename>family.pl</filename> fájl tartalmazza a pdf-ben megadott Prolog programot.
            <programlisting language="perl">
                férfi(nándi).
                férfi(matyi).
                férfi(norbi).
                férfi(dodi).
                férfi(joska).
                nő(gréta).
                nő(erika).
                nő(kitti).
                nő(marica).
                gyereke(nándi, norbi).
                gyereke(matyi, norbi).
                gyereke(gréta, norbi).
                gyereke(nándi, erika).
                gyereke(matyi, erika).
                gyereke(gréta, erika).
                gyereke(norbi, dodi).
                gyereke(norbi, kitti).
                gyereke(erika, joska).
                gyereke(erika, marica).

                        . . .

            </programlisting>
            Ezt a programunkba a következő módon fogjuk beolvasni.
            <programlisting language="java">
                String s = "consult('family.pl')";
                Query q = new Query(s);
                System.out.println(q.hasSolution());        
            </programlisting>
            Itt jól látható, hogy hogyan fog működni maga az alkalmazás. Elsőnek megadunk egy stringet, mely kiértékelni kívánt formulát tartalmazza.
            Majd létrehozunk egy <classname>Query</classname> osztályú objektumot hozunk létre. Ez az osztály teszi lehetővé, hogy kiértékeljük a 
            formula igazságértékét, vagy az egyes változók lehetséges értékeit. Ha csak az igazságértékre vagyunk kíváncsiak, akkor a <function>hasSolution()</function>
            függvényt kell használni. Ha itt hamis eredményt ad, akkor a fájlt nem találja.
            <programlisting language="java">
                String t2 = "apa(gréta)";
                System.out.println(t2 + " is " + (Query.hasSolution(t2) ? "provable" : "not provable"));        
            </programlisting>
            Az első példa tehát azt mutatja be, hogy hogyan lehet megtudni a formula igazságértékét. Jelen esetben az vizsgáljuk, hogy 
            Gréta apának tekinthető-e. Nyilván nem, vagyis a terminálban a "not provable" kifejezés jelenik meg.
            <programlisting language="java"><![CDATA[
                String t3 = "nagyapja(X, matyi)";
                System.out.println("each solution of " + t3);
                Query q3 = new Query(t3);
                while (q3.hasMoreSolutions()) {
                    Map<String, Term> s3 = q3.nextSolution();
                    System.out.println("X = " + s3.get("X"));
                }]]>                
            </programlisting>
            A változók értékének lehetséges értékeit kétféleképpen lehet felsorolni. A fenti példában azokat az X-eket keressük, akik Matyi nagyapjai lehetnek.
            Ezt úgy tudjuk megfogalmazni matematikai logikával, hogy azokat az X-eket keressük, akik Matyi apjának vagy anyjának az apja. Tehát 
            végig iterálunk a lehetséges X-eken. Ehhez a <function>hasMoreSolution()</function> használjuk, mely azt adja vissza, hogy van-e még több megoldás.
            A <function>nextSolution()</function> eredményét eltároljuk kulcs-érték formátumban. Ezt a <classname>Map</classname> interfész segítségével oldjuk
            meg. Ebből az adatszerkezetből a <function>get</function> tagfüggvénnyel tudjuk kinyerni az "X"-hez tartozó értéket.
            Lássuk, hogyan lehet másképpen kilistázni a változóértékeket.
            <programlisting language="java"><![CDATA[        
                String t6 = "testvér(matyi, X)";
                Map<String, Term>[] ss6 = Query.allSolutions(t6);
                System.out.println("all solutions of " + t6);
                for (int i = 0; i < ss6.length; i++) {
                    System.out.println("X = " + ss6[i].get("X"));
                }]]>        
            </programlisting>
            Most azt fogjuk használni, hogy a kulcs-érték párokból tömböt készítünk, és egy <function>for</function> ciklus segítségével
            végig megyünk rajta és kiírjuk. Ebben a részben azt viszgáljuk, hogy kik Matyi testvérei. Matyi testvérei azok akiknek ugyanaz 
            az apja és anyja. 
            <programlisting language="java">
                String t4 = "nagyapa(X)";
                System.out.println("first solution of " + t4 + ": X = " + Query.oneSolution(t4).get("X"));        
            </programlisting>
            Egy másik példában azokat az X-eket keressük, akik nagyapák, vagyis olyan személyeket, akik 
            gyermeke szülő. 
            <programlisting language="java"><![CDATA[
                String t7 = "gyereke(X, norbi)";
                System.out.println("each solution of " + t7);
                Query q7 = new Query(t7);
                while (q7.hasMoreSolutions()) {
                    Map<String, Term> s7 = q7.nextSolution();
                    System.out.println("X = " + s7.get("X"));
                }]]>               
            </programlisting>
            Utolsó példaként vizsgáljuk meg, hogy kik Norbi gyermekei. Ahhoz, hogy Norbi gyermekeit megtaláljuk, ahhoz jelenleg nem kell semmit
            tennünk, hiszen, ezt a <filename>family.pl</filename> fájlban explicite leírtuk. 
        </para>
    </section>        

    <section>
        <title>GIMP Scheme hack</title>
        <para>
            Ha az előző félévben nem dolgoztad fel a témát (például a mandalás vagy a króm szöveges
            dobozosat) akkor itt az alkalom!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
    </section>        

</chapter>                
